<?php
/**
 * Partner
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Beanie ERP API
 *
 * An API specification for interacting with the Beanie ERP system
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@bean.ie
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Partner Class Doc Comment
 *
 * @category Class
 * @description Partner Details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Partner implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Partner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'currency_code' => 'string',
        'net_terms' => 'int',
        'credit_limit' => 'double',
        'partner_vat' => 'string',
        'id' => 'int',
        'code' => 'string',
        'state' => 'string',
        'credit_hold' => 'bool',
        'balance' => 'double',
        'address_ids' => 'int[]',
        'notes' => '\Swagger\Client\Model\PartnerNote[]',
        'receivables_ledgers' => '\Swagger\Client\Model\ReceivablesLedger[]',
        'payables_ledgers' => '\Swagger\Client\Model\PayablesLedger[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'currency_code' => null,
        'net_terms' => 'int32',
        'credit_limit' => 'double',
        'partner_vat' => null,
        'id' => 'int64',
        'code' => null,
        'state' => null,
        'credit_hold' => null,
        'balance' => 'double',
        'address_ids' => 'int32',
        'notes' => null,
        'receivables_ledgers' => null,
        'payables_ledgers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'currency_code' => 'currency_code',
        'net_terms' => 'net_terms',
        'credit_limit' => 'credit_limit',
        'partner_vat' => 'partner_vat',
        'id' => 'id',
        'code' => 'code',
        'state' => 'state',
        'credit_hold' => 'credit_hold',
        'balance' => 'balance',
        'address_ids' => 'address_ids',
        'notes' => 'notes',
        'receivables_ledgers' => 'receivables_ledgers',
        'payables_ledgers' => 'payables_ledgers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'currency_code' => 'setCurrencyCode',
        'net_terms' => 'setNetTerms',
        'credit_limit' => 'setCreditLimit',
        'partner_vat' => 'setPartnerVat',
        'id' => 'setId',
        'code' => 'setCode',
        'state' => 'setState',
        'credit_hold' => 'setCreditHold',
        'balance' => 'setBalance',
        'address_ids' => 'setAddressIds',
        'notes' => 'setNotes',
        'receivables_ledgers' => 'setReceivablesLedgers',
        'payables_ledgers' => 'setPayablesLedgers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'currency_code' => 'getCurrencyCode',
        'net_terms' => 'getNetTerms',
        'credit_limit' => 'getCreditLimit',
        'partner_vat' => 'getPartnerVat',
        'id' => 'getId',
        'code' => 'getCode',
        'state' => 'getState',
        'credit_hold' => 'getCreditHold',
        'balance' => 'getBalance',
        'address_ids' => 'getAddressIds',
        'notes' => 'getNotes',
        'receivables_ledgers' => 'getReceivablesLedgers',
        'payables_ledgers' => 'getPayablesLedgers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['net_terms'] = isset($data['net_terms']) ? $data['net_terms'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['partner_vat'] = isset($data['partner_vat']) ? $data['partner_vat'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['credit_hold'] = isset($data['credit_hold']) ? $data['credit_hold'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['address_ids'] = isset($data['address_ids']) ? $data['address_ids'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['receivables_ledgers'] = isset($data['receivables_ledgers']) ? $data['receivables_ledgers'] : null;
        $this->container['payables_ledgers'] = isset($data['payables_ledgers']) ? $data['payables_ledgers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets net_terms
     *
     * @return int
     */
    public function getNetTerms()
    {
        return $this->container['net_terms'];
    }

    /**
     * Sets net_terms
     *
     * @param int $net_terms net_terms
     *
     * @return $this
     */
    public function setNetTerms($net_terms)
    {
        $this->container['net_terms'] = $net_terms;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit credit_limit
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets partner_vat
     *
     * @return string
     */
    public function getPartnerVat()
    {
        return $this->container['partner_vat'];
    }

    /**
     * Sets partner_vat
     *
     * @param string $partner_vat partner_vat
     *
     * @return $this
     */
    public function setPartnerVat($partner_vat)
    {
        $this->container['partner_vat'] = $partner_vat;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets credit_hold
     *
     * @return bool
     */
    public function getCreditHold()
    {
        return $this->container['credit_hold'];
    }

    /**
     * Sets credit_hold
     *
     * @param bool $credit_hold credit_hold
     *
     * @return $this
     */
    public function setCreditHold($credit_hold)
    {
        $this->container['credit_hold'] = $credit_hold;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets address_ids
     *
     * @return int[]
     */
    public function getAddressIds()
    {
        return $this->container['address_ids'];
    }

    /**
     * Sets address_ids
     *
     * @param int[] $address_ids address_ids
     *
     * @return $this
     */
    public function setAddressIds($address_ids)
    {
        $this->container['address_ids'] = $address_ids;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \Swagger\Client\Model\PartnerNote[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \Swagger\Client\Model\PartnerNote[] $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets receivables_ledgers
     *
     * @return \Swagger\Client\Model\ReceivablesLedger[]
     */
    public function getReceivablesLedgers()
    {
        return $this->container['receivables_ledgers'];
    }

    /**
     * Sets receivables_ledgers
     *
     * @param \Swagger\Client\Model\ReceivablesLedger[] $receivables_ledgers receivables_ledgers
     *
     * @return $this
     */
    public function setReceivablesLedgers($receivables_ledgers)
    {
        $this->container['receivables_ledgers'] = $receivables_ledgers;

        return $this;
    }

    /**
     * Gets payables_ledgers
     *
     * @return \Swagger\Client\Model\PayablesLedger[]
     */
    public function getPayablesLedgers()
    {
        return $this->container['payables_ledgers'];
    }

    /**
     * Sets payables_ledgers
     *
     * @param \Swagger\Client\Model\PayablesLedger[] $payables_ledgers payables_ledgers
     *
     * @return $this
     */
    public function setPayablesLedgers($payables_ledgers)
    {
        $this->container['payables_ledgers'] = $payables_ledgers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


