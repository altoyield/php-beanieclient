<?php
/**
 * ProductionOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Beanie ERP API
 *
 * An API specification for interacting with the Beanie ERP system
 *
 * OpenAPI spec version: 0.2
 * Contact: dev@bean.ie
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductionOrder Class Doc Comment
 *
 * @category Class
 * @description Production Order Details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductionOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductionOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'priority' => 'int',
        'quantity' => 'int',
        'notes' => 'string',
        'bill_of_materials_id' => 'int',
        'sales_order_id' => 'int',
        'id' => 'int',
        'work_centre_group_id' => 'int',
        'job_order' => 'int',
        'state' => 'string',
        'logs' => '\Swagger\Client\Model\ProductionOrderLog[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'priority' => 'int32',
        'quantity' => 'int32',
        'notes' => null,
        'bill_of_materials_id' => 'int64',
        'sales_order_id' => 'int64',
        'id' => 'int64',
        'work_centre_group_id' => 'int64',
        'job_order' => 'int64',
        'state' => null,
        'logs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'priority' => 'priority',
        'quantity' => 'quantity',
        'notes' => 'notes',
        'bill_of_materials_id' => 'bill_of_materials_id',
        'sales_order_id' => 'sales_order_id',
        'id' => 'id',
        'work_centre_group_id' => 'work_centre_group_id',
        'job_order' => 'job_order',
        'state' => 'state',
        'logs' => 'logs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'priority' => 'setPriority',
        'quantity' => 'setQuantity',
        'notes' => 'setNotes',
        'bill_of_materials_id' => 'setBillOfMaterialsId',
        'sales_order_id' => 'setSalesOrderId',
        'id' => 'setId',
        'work_centre_group_id' => 'setWorkCentreGroupId',
        'job_order' => 'setJobOrder',
        'state' => 'setState',
        'logs' => 'setLogs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'priority' => 'getPriority',
        'quantity' => 'getQuantity',
        'notes' => 'getNotes',
        'bill_of_materials_id' => 'getBillOfMaterialsId',
        'sales_order_id' => 'getSalesOrderId',
        'id' => 'getId',
        'work_centre_group_id' => 'getWorkCentreGroupId',
        'job_order' => 'getJobOrder',
        'state' => 'getState',
        'logs' => 'getLogs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['bill_of_materials_id'] = isset($data['bill_of_materials_id']) ? $data['bill_of_materials_id'] : null;
        $this->container['sales_order_id'] = isset($data['sales_order_id']) ? $data['sales_order_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['work_centre_group_id'] = isset($data['work_centre_group_id']) ? $data['work_centre_group_id'] : null;
        $this->container['job_order'] = isset($data['job_order']) ? $data['job_order'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['logs'] = isset($data['logs']) ? $data['logs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets bill_of_materials_id
     *
     * @return int
     */
    public function getBillOfMaterialsId()
    {
        return $this->container['bill_of_materials_id'];
    }

    /**
     * Sets bill_of_materials_id
     *
     * @param int $bill_of_materials_id bill_of_materials_id
     *
     * @return $this
     */
    public function setBillOfMaterialsId($bill_of_materials_id)
    {
        $this->container['bill_of_materials_id'] = $bill_of_materials_id;

        return $this;
    }

    /**
     * Gets sales_order_id
     *
     * @return int
     */
    public function getSalesOrderId()
    {
        return $this->container['sales_order_id'];
    }

    /**
     * Sets sales_order_id
     *
     * @param int $sales_order_id sales_order_id
     *
     * @return $this
     */
    public function setSalesOrderId($sales_order_id)
    {
        $this->container['sales_order_id'] = $sales_order_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets work_centre_group_id
     *
     * @return int
     */
    public function getWorkCentreGroupId()
    {
        return $this->container['work_centre_group_id'];
    }

    /**
     * Sets work_centre_group_id
     *
     * @param int $work_centre_group_id work_centre_group_id
     *
     * @return $this
     */
    public function setWorkCentreGroupId($work_centre_group_id)
    {
        $this->container['work_centre_group_id'] = $work_centre_group_id;

        return $this;
    }

    /**
     * Gets job_order
     *
     * @return int
     */
    public function getJobOrder()
    {
        return $this->container['job_order'];
    }

    /**
     * Sets job_order
     *
     * @param int $job_order job_order
     *
     * @return $this
     */
    public function setJobOrder($job_order)
    {
        $this->container['job_order'] = $job_order;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return \Swagger\Client\Model\ProductionOrderLog[]
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param \Swagger\Client\Model\ProductionOrderLog[] $logs logs
     *
     * @return $this
     */
    public function setLogs($logs)
    {
        $this->container['logs'] = $logs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


